// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AccountServiceInterface is an autogenerated mock type for the AccountServiceInterface type
type AccountServiceInterface struct {
	mock.Mock
}

// CloseAccount provides a mock function with given fields: accountID, accountType
func (_m *AccountServiceInterface) CloseAccount(accountID int, accountType string) error {
	ret := _m.Called(accountID, accountType)

	if len(ret) == 0 {
		panic("no return value specified for CloseAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(accountID, accountType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: accountType, data
func (_m *AccountServiceInterface) CreateAccount(accountType string, data []byte) error {
	ret := _m.Called(accountType, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(accountType, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deposit provides a mock function with given fields: accountID, amount, accountType
func (_m *AccountServiceInterface) Deposit(accountID int, amount float64, accountType string) error {
	ret := _m.Called(accountID, amount, accountType)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, float64, string) error); ok {
		r0 = rf(accountID, amount, accountType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: accountID, accountType
func (_m *AccountServiceInterface) GetBalance(accountID int, accountType string) (float64, error) {
	ret := _m.Called(accountID, accountType)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (float64, error)); ok {
		return rf(accountID, accountType)
	}
	if rf, ok := ret.Get(0).(func(int, string) float64); ok {
		r0 = rf(accountID, accountType)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(accountID, accountType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: fromID, toID, amount, fromType, toType
func (_m *AccountServiceInterface) Transfer(fromID int, toID int, amount float64, fromType string, toType string) error {
	ret := _m.Called(fromID, toID, amount, fromType, toType)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, float64, string, string) error); ok {
		r0 = rf(fromID, toID, amount, fromType, toType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: accountID, amount, accountType
func (_m *AccountServiceInterface) Withdraw(accountID int, amount float64, accountType string) error {
	ret := _m.Called(accountID, amount, accountType)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, float64, string) error); ok {
		r0 = rf(accountID, amount, accountType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountServiceInterface creates a new instance of AccountServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountServiceInterface {
	mock := &AccountServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
